// @ts-check
const childProcess = require("child_process");
const { promisify } = require("util");
const fs = require("fs");
const path = require("path");
const c = require("./colors");

const exec = promisify(childProcess.exec);

// prettier-ignore
const UNABLE_TO_FIND_POSTINSTALL_TRIGGER__ENVAR_MISSING = 'UNABLE_TO_FIND_POSTINSTALL_TRIGGER__ENVAR_MISSING'
// prettier-ignore
const UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_PARSE_ERROR = 'UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_PARSE_ERROR'
// prettier-ignore
const UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR = 'UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR'


function debug(message, ...optionalParams) {
  if (process.env.DEBUG && process.env.DEBUG === "forge-ml:postinstall") {
    console.log(message, ...optionalParams);
  }
}
/**
 * Adds `package.json` to the end of a path if it doesn't already exist'
 * @param {string} pth
 */
function addPackageJSON(pth) {
  if (pth.endsWith("package.json")) return pth;
  return path.join(pth, "package.json");
}

/**
 * Looks up for a `package.json` which is not `@forge-ml/client` or `forge-ml` and returns the directory of the package
 * @param {string | null} startPath - Path to Start At
 * @param {number} limit - Find Up limit
 * @returns {string | null}
 */
function findPackageRoot(startPath, limit = 10) {
  // if (!startPath || !fs.existsSync(startPath)) return null;
  let currentPath = process.cwd();
  // Limit traversal
  for (let i = 0; i < limit; i++) {
    const pkgPath = addPackageJSON(currentPath);
    console.log(startPath, pkgPath)
    if (fs.existsSync(pkgPath)) {
      try {
        const pkg = require(pkgPath);
        if (pkg.name && !["@forge-ml/client", "forge-ml"].includes(pkg.name)) {
          console.log(pkg)
          return pkgPath.replace("package.json", "");
        }
      } catch {} // eslint-disable-line no-empty
    }
    currentPath = path.join(currentPath, "../");
  }
  return null;
}

/**
 * The `postinstall` hook of client sets up the ground and env vars for the `forge-ml generate` command,
 * and runs it, showing a warning if the schema is not found.
 * - initializes the ./node_modules/@forge-ml/client folder with the default index(-browser).js/index.d.ts.
 * - sets the path of the root of the project (TODO: to verify) to the `process.env.FORGE_GENERATE_IN_POSTINSTALL`
 *   variable, or `'true'` if the project root cannot be found.
 * - runs `forge-ml generate`, passing through additional information about the command that triggered the generation,
 *   which is useful for debugging/telemetry. It tries to use the local `forge-ml` package if it is installed, otherwise it
 *   falls back to the global `forge-ml` package. If neither options are available, it warns the user to install `forge-ml` first.
 */
async function main() {
  if (process.env.INIT_CWD) {
    process.chdir(process.env.INIT_CWD); // necessary, because npm chooses __dirname as process.cwd()
    // in the postinstall hook
  }

  // TODO: consider using the `which` package
  const localPath = getLocalPackagePath();

  console.log(localPath)
  // Only execute if !localpath
  const installedGlobally = localPath ? undefined : await isInstalledGlobally();

  // this is needed, so we can find the correct schemas in yarn workspace projects
  const root = findPackageRoot(localPath);

  console.log(root)

  process.env.FORGE_GENERATE_IN_POSTINSTALL = root ? root : "true";

  debug({
    localPath,
    installedGlobally,
    init_cwd: process.env.INIT_CWD,
    FORGE_GENERATE_IN_POSTINSTALL: process.env.FORGE_GENERATE_IN_POSTINSTALL,
  });
  try {
    if (localPath) {
      await run("bun", [
        localPath,
        "generate",
        "--postinstall",
        doubleQuote(getPostInstallTrigger()),
      ], root || process.cwd());
      return;
    }
    if (installedGlobally) {
      await run("forge", [
        "generate",
        "--postinstall",
        doubleQuote(getPostInstallTrigger()),
      ], root || process.cwd());
      return;
    }
  } catch (e) {
    // if exit code = 1 do not print
    if (e && e !== 1) {
      console.error(e);
    }
    debug(e);
  }

  if (!localPath && !installedGlobally) {
    console.error(
      `${c.yellow(
        "warning"
      )} In order to use "@forge-ml/client", please install the Forge CLI. You can install it "npm add -D forge-ml".`
    );
  }
}

function getLocalPackagePath() {
  try {
    const packagePath = require.resolve("@forge-ml/client/package.json");
    if (packagePath) {
      return require.resolve("forge-ml");
    }
  } catch (e) {} // eslint-disable-line no-empty

  return null;
}

async function isInstalledGlobally() {
  try {
    const result = await exec("forge");
    if (result.stdout.includes("Welcome to Forge!")) {
      return true;
    } else {
      console.error(`${c.yellow("warning")} You still have the ${c.bold(
        "forge"
      )} cli (Forge 1) installed globally.
Please uninstall it with either ${c.green(
        "npm remove -g forge-ml"
      )} or ${c.green("yarn global remove forge-ml")}.`);
    }
  } catch (e) {
    return false;
  }
}

if (!process.env.FORGE_SKIP_POSTINSTALL_GENERATE) {
  main()
    .catch((e) => {
      if (e.stderr) {
        console.error(e.stderr);
      } else {
        console.error(e);
      }
      process.exit(0);
    })
    .finally(() => {
      debug(`postinstall trigger: ${getPostInstallTrigger()}`);
    });
}

function run(cmd, params, cwd = process.cwd()) {
  const child = childProcess.spawn(cmd, params, {
    stdio: ["pipe", "inherit", "inherit"],
    cwd,
  });

  return new Promise((resolve, reject) => {
    child.on("close", () => {
      resolve(undefined);
    });
    child.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(code);
      }
    });
    child.on("error", () => {
      reject();
    });
  });
}



// TODO: can this be replaced some utility eg. mkdir
function makeDir(input) {
  const make = async (pth) => {
    try {
      await fs.promises.mkdir(pth);

      return pth;
    } catch (error) {
      if (error.code === "EPERM") {
        throw error;
      }

      if (error.code === "ENOENT") {
        if (path.dirname(pth) === pth) {
          throw new Error(`operation not permitted, mkdir '${pth}'`);
        }

        if (error.message.includes("null bytes")) {
          throw error;
        }

        await make(path.dirname(pth));

        return make(pth);
      }

      try {
        const stats = await fs.promises.stat(pth);
        if (!stats.isDirectory()) {
          throw new Error("The path is not a directory");
        }
      } catch (_) {
        throw error;
      }

      return pth;
    }
  };

  return make(path.resolve(input));
}

/**
 * Get the command that triggered this postinstall script being run. If there is
 * an error while attempting to get this value then the string constant
 * 'ERROR_WHILE_FINDING_POSTINSTALL_TRIGGER' is returned.
 * This information is just necessary for telemetry.
 */
function getPostInstallTrigger() {
  /*
  npm_config_argv` is not officially documented so here are our research notes 

  `npm_config_argv` is available to the postinstall script when the containing package has been installed by npm into some project.

  An example of its value:

  ```
  npm_config_argv: '{"remain":["../test"],"cooked":["add","../test"],"original":["add","../test"]}',
  ```

  We are interesting in the data contained in the "original" field.

  Trivia/Note: `npm_config_argv` is not available when running e.g. `npm install` on the containing package itself (e.g. when working on it)

  Yarn mimics this data and environment variable. Here is an example following `yarn add` for the same package:

  ```
  npm_config_argv: '{"remain":[],"cooked":["add"],"original":["add","../test"]}'
  ```

  Other package managers like `pnpm` have not been tested.
  */

  const maybe_npm_config_argv_string = process.env.npm_config_argv;

  if (maybe_npm_config_argv_string === undefined) {
    return UNABLE_TO_FIND_POSTINSTALL_TRIGGER__ENVAR_MISSING;
  }

  let npm_config_argv;
  try {
    npm_config_argv = JSON.parse(maybe_npm_config_argv_string);
  } catch (e) {
    return `${UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_PARSE_ERROR}: ${maybe_npm_config_argv_string}`;
  }

  if (typeof npm_config_argv !== "object" || npm_config_argv === null) {
    return `${UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR}: ${maybe_npm_config_argv_string}`;
  }

  const npm_config_argv_original_arr = npm_config_argv.original;

  if (!Array.isArray(npm_config_argv_original_arr)) {
    return `${UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR}: ${maybe_npm_config_argv_string}`;
  }

  const npm_config_argv_original = npm_config_argv_original_arr
    .filter((arg) => arg !== "")
    .join(" ");

  const command =
    npm_config_argv_original === ""
      ? getPackageManagerName()
      : [getPackageManagerName(), npm_config_argv_original].join(" ");

  return command;
}

/**
 * Wrap double quotes around the given string.
 */
function doubleQuote(x) {
  return `"${x}"`;
}

/**
 * Get the package manager name currently being used. If parsing fails, then the following pattern is returned:
 * UNKNOWN_NPM_CONFIG_USER_AGENT(<string received>).
 */
function getPackageManagerName() {
  const userAgent = process.env.npm_config_user_agent;
  if (!userAgent) return "MISSING_NPM_CONFIG_USER_AGENT";

  const name = parsePackageManagerName(userAgent);
  if (!name) return `UNKNOWN_NPM_CONFIG_USER_AGENT(${userAgent})`;

  return name;
}

/**
 * Parse package manager name from useragent. If parsing fails, `null` is returned.
 */
function parsePackageManagerName(userAgent) {
  let packageManager = null;

  // example: 'yarn/1.22.4 npm/? node/v13.11.0 darwin x64'
  // References:
  // - https://pnpm.io/only-allow-pnpm
  // - https://github.com/cameronhunter/npm-config-user-agent-parser
  if (userAgent) {
    const matchResult = userAgent.match(/^([^/]+)\/.+/);
    if (matchResult) {
      packageManager = matchResult[1].trim();
    }
  }

  return packageManager;
}

// expose for testing

exports.UNABLE_TO_FIND_POSTINSTALL_TRIGGER__ENVAR_MISSING =
  UNABLE_TO_FIND_POSTINSTALL_TRIGGER__ENVAR_MISSING;
exports.UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_PARSE_ERROR =
  UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_PARSE_ERROR;
exports.UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR =
  UNABLE_TO_FIND_POSTINSTALL_TRIGGER_JSON_SCHEMA_ERROR;
exports.getPostInstallTrigger = getPostInstallTrigger;
